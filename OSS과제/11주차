11주차 정리

브랜치 병합
#Fast-foward merge

병합 전
     master
A -> B
      \              bugfix
       ㅡㅡㅡ X ㅡㅡㅡ> Y

병합 조건: bugfix 브랜치 이력이 master 브랜치 이력을 모두 포함할때, 두 브랜치가 일렬 상태일 때
병합 명령: $git merge bugfix

병합 후
                                 
A -> B               master         
      \              bugfix           작업공간, 스테이징 영역이 y로 이동
       ㅡㅡㅡ X ㅡㅡㅡ> Y

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#3-way merge

병합 전
                     master
A -> B  ㅡㅡ> C  ㅡㅡ>  D
      \              
       ㅡㅡㅡ X ㅡㅡㅡ> Y
                     bugfix
두 분기가 갈라진 상태, 조상을 하나로 합침

병합 명령: $git merge bugfix
병합 후
                              master        
A -> B  ㅡㅡ> C  ㅡㅡ>  D ㅡㅡ> E
      \                       /
       ㅡㅡㅡ X ㅡㅡㅡ> Y ㅡㅡ 
                     bugfix

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#non fast foward 병합
git merge --no-ff (일렬상태일때 fast-foward가 아닌 3-way merge를 사용 할 때, 이력을 나타내기 위해서)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#squash 병합
git merge --squash hotfix (새로운 커밋에 상대 브랜치의 내용을 모두 합해 새로운 커밋으로 병합)
git --squash 사용 시

O -> O  ㅡㅡ> O  ㅡㅡ>  O ㅡㅡ> X Y Z
      \                       /              (이력이 남지는 않지만 상대 브랜치가 사라지진 않음, 연결고리 생성x) 
       ㅡㅡㅡ X ㅡ> Y ㅡ> Z ㅡ
                     
